project/
│
├─ docker-compose.yml
├─ .env
│
├─ backend/
│   ├─ Dockerfile
│   └─ app.py
│
├─ frontend/
│   ├─ Dockerfile
│   └─ index.js
│
└─ worker/
    ├─ Dockerfile
    └─ worker.py

📄 1. .env
# Ports
BACKEND_PORT=5000
FRONTEND_PORT=3000

# Environment
ENVIRONMENT=development

# MongoDB credentials
MONGO_USER=admin
MONGO_PASS=secret123
MONGO_DB=mydatabase
MONGO_PORT=27017

version: "3.9"

services:
  backend:
    build:
      context: ./backend
    container_name: backend_service
    environment:
      - ENV=${ENVIRONMENT}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_DB=${MONGO_DB}
      - MONGO_PORT=${MONGO_PORT}
    ports:
      - "${BACKEND_PORT}:5000"
    networks:
      - my_network
    depends_on:
      - mongo

  frontend:
    build:
      context: ./frontend
    container_name: frontend_service
    environment:
      - API_URL=http://backend:${BACKEND_PORT}
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - my_network
    depends_on:
      - backend

  worker:
    build:
      context: ./worker
    container_name: worker_service
    environment:
      - ENV=${ENVIRONMENT}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_DB=${MONGO_DB}
      - MONGO_PORT=${MONGO_PORT}
    networks:
      - my_network
    depends_on:
      - backend

  mongo:
    image: mongo:6
    container_name: mongo_service
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - my_network

networks:
  my_network:
    driver: bridge


FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

COPY . /app

CMD ["python", "app.py"]

FROM node:20-alpine

WORKDIR /app

COPY package.json /app/
RUN npm install

COPY . /app

CMD ["node", "index.js"]


FROM python:3.11-slim

WORKDIR /worker

COPY requirements.txt /worker/
RUN pip install --no-cache-dir -r requirements.txt

COPY . /worker

CMD ["python", "worker.py"]


📌 איך מריצים

להרים את כל המערכת:

docker-compose up --build -d


לבדוק לוגים של שירות מסוים:

docker-compose logs -f backend


להוסיף service חדש:

יוצרים תיקייה חדשה עם Dockerfile.

מוסיפים בלוק חדש תחת services ב־docker-compose.yml.

מריצים:

docker-compose up -d new_service




services:
  elasticsearch:
    image: elasticsearch:8
    environment:
      - ES_HOST=http://elasticsearch:9200
      - ES_INDEX=my_elastic_index
    ports:
      - "9200:9200"
    networks:
      - my_network