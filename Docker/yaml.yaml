version: "3.9"

services:

  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  retriever:
    build: ./retriever
    container_name: retriever
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017
    networks:
      - pipeline_net

  preprocessor:
    build: ./preprocessor
    container_name: preprocessor
    depends_on:
      - retriever
    networks:
      - pipeline_net

  enricher:
    build: ./enricher
    container_name: enricher
    depends_on:
      - preprocessor
    networks:
      - pipeline_net

  persister:
    build: ./persister
    container_name: persister
    depends_on:
      - enricher
      - mongo
    networks:
      - pipeline_net

volumes:
  mongo_data:

networks:
  pipeline_net:
    driver: bridge



#🔹 הסבר קצר
#
#services → כל שירות מקבל שם, תמונה או build, משתני סביבה ורשת.
#
#depends_on → מבטיח שהשירותים ירוצו לפי סדר תלות.
#
#volumes → מאפשר שמירה של נתונים במונגו גם אחרי עצירה.
#
#networks → רשת פנימית בין השירותים.
#
#2️⃣ איך מעדכנים את docker-compose.yml
#
#כל פעם שאתה משנה:
#
#Dockerfile של שירות
#
#משתני סביבה
#
#תלות בין שירותים
#
#ports או volumes
#
#אתה פשוט:
#
#docker-compose up -d --build
#
#
#Compose מזהה שינויים ב‑Dockerfile או בקוד של השירותים
#
#בונה מחדש רק את מה שצריך
#
#מריץ את הקונטיינרים החדשים ברקע
#
#אם לא שינית את Dockerfile או הקוד ואתה רק רוצה להפעיל שירות חדש שנוסף ל־docker-compose.yml:
#
#docker-compose up -d
#
#
#Compose יתחבר לשירותים הקיימים, יריץ את החדש בלי build מחדש.
#
#💡 טיפ שימושי:
#
#תמיד שמרו עותק של docker-compose.yml בתיקיית root של הפרויקט.
#
#אם מוסיפים שירות חדש, פשוט הוסיפו אותו ב־services: ואז docker-compose up -d – Compose יטפל בשאר.


הוספת Service חדש ל־docker-compose.yml
📌 1. שמירה על אותו קובץ docker-compose.yml

תמיד עובדים עם אותו קובץ מרכזי.

כל שירות חדש = בלוק חדש תחת services.

📌 2. מבנה פרויקט מומלץ

כל שירות בתיקייה משלו עם קוד + Dockerfile:

project/
  docker-compose.yml
  service1/
    Dockerfile
    ...
  service2/
    Dockerfile
    ...
  service3/
    Dockerfile
    ...

📌 3. הוספת Service חדש

נניח שיש לך כבר backend ו־frontend, ועכשיו אתה מוסיף worker:

services:
  backend:
    build:
      context: ./backend
    networks:
      - my_network
    ports:
      - "5000:5000"

  frontend:
    build:
      context: ./frontend
    networks:
      - my_network
    ports:
      - "3000:3000"
    depends_on:
      - backend

  worker:
    build:
      context: ./worker
    networks:
      - my_network
    depends_on:
      - backend

networks:
  my_network:
    driver: bridge

📌 4. מה קורה אחרי שהוספת Service חדש?

להרים את כל המערכת (כולל השירות החדש):

docker-compose up -d


להרים רק את השירות החדש (בלי לגעת באחרים):

docker-compose up -d worker


אם שינית Dockerfile של שירות מסוים (צריך rebuild):

docker-compose build worker
docker-compose up -d worker